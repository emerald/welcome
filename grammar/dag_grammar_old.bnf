<compilation> ::=
<constantDeclarationS> 'TEOF'
;
<constantDeclarationS> ::=
<empty>
| <constantDeclarationS> <environmentExport>
| <constantDeclarationS> <constantDeclaration>
;
<empty> ::=
' '
;
<environmentExport> ::=
'KEXPORT' <symbolReferenceS> 'KTO' 'TSTRINGLITERAL'
|
'KEXPORT' <symbolReferenceS>
;
<typeClauseOpt> ::=
<empty>
| <typeClause>
;
<typeClause> ::=
'TCOLON' <typeDefinition>
;
<typeDefinition> ::=
<expression>
;
<abstractType> ::=
'KTYPEOBJECT' <symbolDefinition> <builtin> <operationSignatureS> 'KEND' <symbolReference>
;
<record> ::=
'KRECORD' <symbolDefinition> <recordFieldS> 'KEND' <symbolReference>
;
<recordFieldS> ::=
<recordField>
| <recordFieldS> <recordField>
;
<recordField> ::=
<attached> <ovar> <symbolDefinitionS> <typeClause>
;
<enumeration> ::=
'KENUMERATION' <symbolDefinition> <symbolDefinitionS> 'KEND' <symbolReference>
;
<symbolDefinitionS> ::=
<symbolDefinition>
| <symbolDefinitionS> 'TCOMMA' <symbolDefinition>
;
<symbolReferenceS> ::=
<symbolReference>
| <symbolReferenceS> 'TCOMMA' <symbolReference>
;
<symbolReferenceOrLiteral> ::=
<symbolReference>
| 'TINTEGERLITERAL'
| 'TCHARACTERLITERAL'
| 'TSTRINGLITERAL'
;
<symbolReferenceOrLiteralS> ::=
<symbolReferenceOrLiteral>
| <symbolReferenceOrLiteralS> 'TCOMMA' <symbolReferenceOrLiteral>
;
<operationSignatureS> ::=
<empty>
| <operationSignatureS> <operationSignature>
;
<operationSignature> ::=
'KFUNCTION' <operationNameDefinition> <parameterClause> <returnClause> <whereClause>
|
<operationWord> <operationNameDefinition> <parameterClause> <returnClause> <whereClause>
;
<operationWord> ::=
'KOPERATION'
| 'KOP'
;
<parameterClause> ::=
<empty>
| 'TLSQUARE' 'TRSQUARE'
| 'TLSQUARE' <parameterS> 'TRSQUARE'
;
<parameterS> ::=
<parameter>
| <parameterS> 'TCOMMA' <parameter>
;
<omove> ::=
'KMOVE'
?
;
<oattached> ::=
'KATTACHED'
?
;
<parameter> ::=
<omove> <oattached> <symbolDefinition> 'TCOLON' <expression>
| <omove> <oattached> <expression>
;
<returnClause> ::=
<empty>
| 'ORETURNS' 'TLSQUARE' 'TRSQUARE'
| 'ORETURNS' 'TLSQUARE' <parameterS> 'TRSQUARE'
;
<whereClause> ::=
<empty>
| <whereWidgitS>
;
<whereWidgitS> ::=
<whereWidgit>
| <whereWidgitS> <whereWidgit>
;
<whereWidgit> ::=
'KWHERE' 'TIDENTIFIER' 'OASSIGN' <expression>
| 'KSUCHTHAT' 'TIDENTIFIER' 'OCONFORMSTO' <typeObject>
| 'KFORALL' 'TIDENTIFIER'
;
<builtin> ::=
('KBUILTIN' 'TINTEGERLITERAL')?
;
<object> ::=
'KOBJECT' <symbolDefinition> <builtin> <declarationS> ||
<operationDefinitionS> 'KEND' <symbolReference>
;
<closure> ::=
'KCLOSURE' <symbolDefinition> <builtin> <parameterClause> ||
<declarationS> <operationDefinitionS> 'KEND' <symbolReference>
;
<creators> ::=
<empty>
| <creators> 'KCLASS' <constantDeclaration>
| <creators> 'KCLASS' <operationDefinition>
;
<obase> ::=
<empty>
| 'TLPAREN' <symbolReference> 'TRPAREN'
;
<class> ::=
'KCLASS' <symbolDefinition> <obase> <parameterClause> <builtin> ||
<creators> <declarationS> <operationDefinitionS> 'KEND' <symbolReference>
;
<declarationS> ::=
<empty>
| <declarationS> <declaration>
;
<attached> ::=
'KATTACHED'
| <empty>
;
<declaration> ::=
<attached> <declarationprime>
;
<declarationprime> ::=
<constantDeclaration>
| <variableDeclaration>
| <fieldDeclaration>
| <externalDeclaration>
;
<constantDefOp> ::=
'OASSIGN'
;
<fieldDeclaration> ::=
'KFIELD' <symbolDefinition> <typeClause> <initializerOpt>
| 'KCONST' 'KFIELD' <symbolDefinition> <typeClause> <initializerOpt>
;
<constantDeclaration> ::=
'KCONST' <symbolDefinition> <typeClauseOpt> <constantDefOp> <expression>
;
<externalDeclaration> ::=
'KEXTERNAL' <symbolDefinition> <typeClause>
;
<initializerOpt> ::=
<empty>
| 'OASSIGN' <expression>
;
<initializer> ::=
'OASSIGN' <expression>
;
<variableDeclaration> ::=
'KVAR' <symbolDefinitionS> <typeClause> <initializerOpt>
;
<operationDefinitionS> ::=
<empty>
| <operationDefinitionS> <operationDefinition>
| <operationDefinitionS> <initiallyDefinition>
| <operationDefinitionS> <recoveryDefinition>
| <operationDefinitionS> <processDefinition>
;
<operationDefinition> ::=
<operationDefinitionRest>
| 'KEXPORT' <operationDefinitionRest>
;
<operationDefinitionRest> ::=
<operationSignature> <blockBody> 'KEND' <operationNameReference>
;
<blockBody> ::=
<declarationsAndStatements> <unavailableHandler> <failureHandler>
;
<initiallyDefinition> ::=
'KINITIALLY' <blockBody> 'KEND' 'KINITIALLY'
;
<recoveryDefinition> ::=
'KRECOVERY' <blockBody> 'KEND' 'KRECOVERY'
;
<processDefinition> ::=
'KPROCESS' <blockBody> 'KEND' 'KPROCESS'
;
<declarationsAndStatements> ::=
<empty>
| <declarationsAndStatements> <declaration>
| <declarationsAndStatements> <statement>
;
<acceptStatement> ::= 'KACCEPT' <expression>
;
<statement> ::=
<ifStatement>
| <loopStatement>
| <forStatement>
| <exitStatement>
| <assignmentOrInvocationStatement>
| <assertStatement>
| <moveStatement>
| <compoundStatement>
| <primitiveStatement>
| <waitStatement>
| <signalStatement>
| <returnStatement>
| <returnAndFailStatement>
| <acceptStatement>
| <error>
;
<optDeclaration> ::=
<empty>
| 'TLSQUARE' <symbolDefinition> 'TRSQUARE'
;
<unavailableHandler> ::=
<empty>
| 'KUNAVAILABLE' <optDeclaration> <blockBody> 'KEND' 'KUNAVAILABLE'
;
<failureHandler> ::=
<empty>
| 'KFAILURE' <blockBody> 'KEND' 'KFAILURE'
;
<ifClauseS> ::=
<ifClause>
| <ifClauseS> 'KELSEIF' <ifClause>
;
<ifClause> ::=
<expression> 'KTHEN' <declarationsAndStatements>
;
<elseClause> ::=
<empty>
| 'KELSE' <declarationsAndStatements>
;
<ifStatement> ::=
'KIF' <ifClauseS> <elseClause> 'KEND' 'KIF'
;
<forStatement> ::=
'KFOR' 'TLPAREN' <assignmentOrInvocationStatement> 'TCOLON' ||
<expression> 'TCOLON' <assignmentOrInvocationStatement> 'TRPAREN' ||
<declarationsAndStatements> 'KEND' 'KFOR'
| 'KFOR' <symbolDefinition> <typeClause> <initializer> 'KWHILE' ||
<expression> 'KBY' <assignmentOrInvocationStatement> ||
<declarationsAndStatements> 'KEND' 'KFOR'
| 'KFOR' <symbolDefinition> 'KIN' <expression> ||
<declarationsAndStatements> 'KEND' 'KFOR'
;
<loopStatement> ::=
'KLOOP' <declarationsAndStatements> 'KEND' 'KLOOP'
;
<exitStatement> ::=
'KEXIT' <whenClause>
;
<whenClause> ::=
<empty>
| 'KWHEN' <expression>
;
<alphaS> ::=
<alpha>
| <alphaS> 'TCOMMA' <alpha>
;
<assignmentOrInvocationStatement> ::=
<alpha>
| <alphaS> 'OASSIGN' <expressionS>
;
<assertStatement> ::=
'KASSERT' <expression>
;
<moveStatement> ::=
'KMOVE' <expression> 'KTO' <expression>
| 'KFIX' <expression> 'KAT' <expression>
| 'KREFIX' <expression> 'KAT' <expression>
| 'KUNFIX' <expression>
;
<compoundStatement> ::=
'KBEGIN' <blockBody> 'KEND'
;
<returnStatement> ::=
'KRETURN'
;
<returnAndFailStatement> ::=
'KRETURNANDFAIL'
;
<primitiveImplementation> ::=
<empty>
| <primitiveImplementation> 'TINTEGERLITERAL'
| <primitiveImplementation> 'TSTRINGLITERAL'
;
<oself> ::=
<empty>
| 'KSELF'
;
<ovar> ::=
<empty>
| 'KVAR'
;
<primitiveStatement> ::=
'KPRIMITIVE' <oself> <ovar> <primitiveImplementation> ||
'TLSQUARE' <symbolReferenceSopt> 'TRSQUARE' 'OASSIGN' ||
'TLSQUARE' <symbolReferenceOrLiteralSopt> 'TRSQUARE'
;
<symbolReferenceSopt> ::=
<empty>
| <symbolReferenceS>
;
<symbolReferenceOrLiteralSopt> ::=
<empty>
| <symbolReferenceOrLiteralS>
;
<waitStatement> ::=
'KWAIT' <expression>
;
<signalStatement> ::=
'KSIGNAL' <expression>
;
<expressionS> ::=
<expression>
| <expressionS> 'TCOMMA' <expression>
;
<negate> ::=
'ONEGATE'
| 'OMINUS'
;
<expression> ::=
<expressionZero>
| <expression> 'OOR' <expression>
| <expression> 'KOR' <expression>
| <expression> 'OAND' <expression>
| <expression> 'KAND' <expression>
| 'ONOT' <expression>
| <expression> 'OIDENTITY' <expression>
| <expression> 'ONOTIDENTITY' <expression>
| <expression> 'OEQUAL' <expression>
| <expression> 'ONOTEQUAL' <expression>
| <expression> 'OGREATER' <expression>
| <expression> 'OLESS' <expression>
| <expression> 'OGREATEREQUAL' <expression>
| <expression> 'OLESSEQUAL' <expression>
| <expression> 'OCONFORMSTO' <expression>
| 'KVIEW' <expression> 'KAS' <expression>
| 'KRESTRICT' <expression> 'KTO' <expression>
| <expression> 'OPLUS' <expression>
| <expression> 'OMINUS' <expression>
| <expression> 'OTIMES' <expression>
| <expression> 'ODIVIDE' <expression>
| <expression> 'OMOD' <expression>
| <expression> 'TOPERATOR' <expression>
| <negate> <expression>
| 'KLOCATE' <expression>
| 'KAWAITING' <expression>
| 'KCODEOF' <expression>
| 'KNAMEOF' <expression>
| 'KTYPEOF' <expression>
| 'KSYNTACTICTYPEOF' <expression>
| 'KISLOCAL' <expression>
| 'KISFIXED' <expression>
;
<expressionZero> ::=
<alpha>
;
<alpha> ::=
<beta>
| 'KNEW' <primary>
| <alpha> 'TDOT' <operationNameReference>
| <alpha> 'TDOTSTAR' <primary>
| <alpha> 'TDOTQUESTION' <operationNameReference>
;
<beta> ::=
<primary>
| 'KNEW' <primary> <neArgumentClause>
| <beta> 'TLSQUARE' <argumentS> 'TRSQUARE'
| <alpha> 'TDOLLAR' 'TIDENTIFIER'
| <alpha> 'TDOT' <operationNameReference> <neArgumentClause>
| <alpha> 'TDOTSTAR' <primary> <neArgumentClause>
| <alpha> 'TDOTQUESTION' <operationNameReference> <neArgumentClause>
;
<primary> ::=
<literal>
| <symbolReference>
| 'TLPAREN' <expression> 'TRPAREN'
;
<operationNameDefinition> ::=
<operationName>
| <operatorName>
| <definableOperatorName>
;
<operatorName> ::=
'TOPERATOR'
;
<operationName> ::=
'TIDENTIFIER'
;
<definableOperatorName> ::=
'OOR'
| 'OAND'
| 'OEQUAL'
| 'ONOTEQUAL'
| 'OGREATER'
| 'OLESS'
| 'OGREATEREQUAL'
| 'OLESSEQUAL'
| 'ONEGATE'
| 'ONOT'
| 'OPLUS'
| 'OMINUS'
| 'OTIMES'
| 'ODIVIDE'
| 'OMOD'
;
<nondefinableOperatorName> ::=
'OIDENTITY'
| 'ONOTIDENTITY'
| 'OCONFORMSTO'
;
<operationNameReference> ::=
<operatorName>
| <definableOperatorName>
| <nondefinableOperatorName>
| <operationName>
;
<neArgumentClause> ::=
'TLSQUARE' 'TRSQUARE'
| 'TLSQUARE' <argumentS> 'TRSQUARE'
;
<argumentS> ::=
<argument>
| <argumentS> 'TCOMMA' <argument>
;
<argument> ::=
<expression>
| 'KMOVE' <expression>
| 'KVISIT' <expression>
;
<literal> ::=
'TSTRINGLITERAL'
| 'TCHARACTERLITERAL'
| 'TINTEGERLITERAL'
| 'TREALLITERAL'
| 'KTRUE'
| 'KFALSE'
| 'KSELF'
| 'KNIL'
| <typeLiteral>
| <vectorLiteral>
;
<vectorLiteral> ::=
'TLCURLY' <expressionSOpt> <typeClauseOpt> 'TRCURLY'
;
<expressionSOpt> ::=
<empty>
| <expressionS>
| <expressionS> 'TCOMMA'
;
<typeObject> ::=
<abstractType>
| 'KIMMUTABLE' <abstractType>
;
<typeLiteral> ::=
<typeRest>
| 'KIMMUTABLE' <typeRest>
| 'KMONITOR' <typeRest>
;
<typeRest> ::=
<abstractType>
| <object>
| <closure>
| <record>
| <enumeration>
| <class>
;
<symbolReference> ::=
'TIDENTIFIER'
;
<symbolDefinition> ::=
'TIDENTIFIER'
;
