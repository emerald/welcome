<compilation> ::=
<constantDeclarationS> 'EOF'
;
<constantDeclarationS> ::=
<empty>
| <constantDeclarationS> <environmentExport>
| <constantDeclarationS> <constantDeclaration>
;
<empty> ::=
' '
;
<environmentExport> ::=
'export' <symbolReferenceS> 'to' 'STR LIT'
|
'export' <symbolReferenceS>
;
<typeClauseOpt> ::=
<empty>
| <typeClause>
;
<typeClause> ::=
':' <typeDefinition>
;
<typeDefinition> ::=
<expression>
;
<abstractType> ::=
'typeobject' <symbolDefinition> <builtin> <operationSignatureS> 'end' <symbolReference>
;
<record> ::=
'record' <symbolDefinition> <recordFieldS> 'end' <symbolReference>
;
<recordFieldS> ::=
<recordField>
| <recordFieldS> <recordField>
;
<recordField> ::=
<attached> <ovar> <symbolDefinitionS> <typeClause>
;
<enumeration> ::=
'enumeration' <symbolDefinition> <symbolDefinitionS> 'end' <symbolReference>
;
<symbolDefinitionS> ::=
<symbolDefinition>
| <symbolDefinitionS> ',' <symbolDefinition>
;
<symbolReferenceS> ::=
<symbolReference>
| <symbolReferenceS> ',' <symbolReference>
;
<symbolRefOrLit> ::=
<symbolReference>
| 'INT LIT'
| 'CHAR LIT'
| 'STR LIT'
;
<symbolRefOrLitS> ::=
<symbolRefOrLit>
| <symbolRefOrLitS> ',' <symbolRefOrLit>
;
<operationSignatureS> ::=
<empty>
| <operationSignatureS> <operationSignature>
;
<operationSignature> ::=
'function' <opNameDefinition> <parameterClause> <returnClause> <whereClause>
|
<operationWord> <opNameDefinition> <parameterClause> <returnClause> <whereClause>
;
<operationWord> ::=
'operation'
| 'op'
;
<parameterClause> ::=
<empty>
| '[' ']'
| '[' <parameterS> ']'
;
<parameterS> ::=
<parameter>
| <parameterS> ',' <parameter>
;
<omove> ::=
'move'
?
;
<oattached> ::=
'attached'
?
;
<parameter> ::=
<omove> <oattached> <symbolDefinition> ':' <expression>
| <omove> <oattached> <expression>
;
<returnClause> ::=
<empty>
| '->' '[' ']'
| '->' '[' <parameterS> ']'
;
<whereClause> ::=
<empty>
| <whereWidgitS>
;
<whereWidgitS> ::=
<whereWidgit>
| <whereWidgitS> <whereWidgit>
;
<whereWidgit> ::=
'where' 'IDENTIFIER' '<-' <expression>
| 'suchthat' 'IDENTIFIER' '*>' <typeObject>
| 'forall' 'IDENTIFIER'
;
<builtin> ::=
('builtin' 'INT LIT')?
;
<object> ::=
'object' <symbolDefinition> <builtin> <declarationS> ||
<operationDefinitionS> 'end' <symbolReference>
;
<closure> ::=
'closure' <symbolDefinition> <builtin> <parameterClause> ||
<declarationS> <operationDefinitionS> 'end' <symbolReference>
;
<creators> ::=
<empty>
| <creators> 'class' <constantDeclaration>
| <creators> 'class' <operationDefinition>
;
<obase> ::=
<empty>
| '(' <symbolReference> ')'
;
<class> ::=
'class' <symbolDefinition> <obase> <parameterClause> <builtin> ||
<creators> <declarationS> <operationDefinitionS> 'end' <symbolReference>
;
<declarationS> ::=
<empty>
| <declarationS> <declaration>
;
<attached> ::=
'attached'
| <empty>
;
<declaration> ::=
<attached> <declarationprime>
;
<declarationprime> ::=
<constantDeclaration>
| <variableDeclaration>
| <fieldDeclaration>
| <externalDeclaration>
;
<constantDefOp> ::=
'<-'
;
<fieldDeclaration> ::=
'field' <symbolDefinition> <typeClause> <initializerOpt>
| 'const' 'field' <symbolDefinition> <typeClause> <initializerOpt>
;
<constantDeclaration> ::=
'const' <symbolDefinition> <typeClauseOpt> <constantDefOp> <expression>
;
<externalDeclaration> ::=
'external' <symbolDefinition> <typeClause>
;
<initializerOpt> ::=
<empty>
| '<-' <expression>
;
<initializer> ::=
'<-' <expression>
;
<variableDeclaration> ::=
'var' <symbolDefinitionS> <typeClause> <initializerOpt>
;
<operationDefinitionS> ::=
<empty>
| <operationDefinitionS> <operationDefinition>
| <operationDefinitionS> <initiallyDefinition>
| <operationDefinitionS> <recoveryDefinition>
| <operationDefinitionS> <processDefinition>
;
<operationDefinition> ::=
<operationDefinitionRest>
| 'export' <operationDefinitionRest>
;
<operationDefinitionRest> ::=
<operationSignature> <blockBody> 'end' <operationNameRef>
;
<blockBody> ::=
<declAndStmts> <unavailableHandler> <failureHandler>
;
<initiallyDefinition> ::=
'inITIALLY' <blockBody> 'end' 'inITIALLY'
;
<recoveryDefinition> ::=
'recovery' <blockBody> 'end' 'recovery'
;
<processDefinition> ::=
'process' <blockBody> 'end' 'process'
;
<declAndStmts> ::=
<empty>
| <declAndStmts> <declaration>
| <declAndStmts> <statement>
;
<acceptStatement> ::= 'accept' <expression>
;
<statement> ::=
<ifStatement>
| <loopStatement>
| <forStatement>
| <exitStatement>
| <assignOrInvocStmt>
| <assertStatement>
| <moveStatement>
| <compoundStatement>
| <primitiveStatement>
| <waitStatement>
| <signalStatement>
| <returnStatement>
| <returnAndFailStatement>
| <acceptStatement>
| <error>
;
<optDeclaration> ::=
<empty>
| '[' <symbolDefinition> ']'
;
<unavailableHandler> ::=
<empty>
| 'unavailable' <optDeclaration> <blockBody> 'end' 'unavailable'
;
<failureHandler> ::=
<empty>
| 'failure' <blockBody> 'end' 'failure'
;
<ifClauseS> ::=
<ifClause>
| <ifClauseS> 'elseif' <ifClause>
;
<ifClause> ::=
<expression> 'then' <declAndStmts>
;
<elseClause> ::=
<empty>
| 'else' <declAndStmts>
;
<ifStatement> ::=
'if' <ifClauseS> <elseClause> 'end' 'if'
;
<forStatement> ::=
'for' '(' <assignOrInvocStmt> ':' ||
<expression> ':' <assignOrInvocStmt> ')' ||
<declAndStmts> 'end' 'for'
| 'for' <symbolDefinition> <typeClause> <initializer> 'while' ||
<expression> 'by' <assignOrInvocStmt> ||
<declAndStmts> 'end' 'for'
| 'for' <symbolDefinition> 'in' <expression> ||
<declAndStmts> 'end' 'for'
;
<loopStatement> ::=
'loop' <declAndStmts> 'end' 'loop'
;
<exitStatement> ::=
'exit' <whenClause>
;
<whenClause> ::=
<empty>
| 'when' <expression>
;
<alphaS> ::=
<alpha>
| <alphaS> ',' <alpha>
;
<assignOrInvocStmt> ::=
<alpha>
| <alphaS> '<-' <expressionS>
;
<assertStatement> ::=
'assert' <expression>
;
<moveStatement> ::=
'move' <expression> 'to' <expression>
| 'fix' <expression> 'at' <expression>
| 'refix' <expression> 'at' <expression>
| 'unfix' <expression>
;
<compoundStatement> ::=
'begin' <blockBody> 'end'
;
<returnStatement> ::=
'return'
;
<returnAndFailStatement> ::=
'returnandfail'
;
<primitiveImplementation> ::=
<empty>
| <primitiveImplementation> 'INT LIT'
| <primitiveImplementation> 'STR LIT'
;
<oself> ::=
<empty>
| 'self'
;
<ovar> ::=
<empty>
| 'var'
;
<primitiveStatement> ::=
'primitive' <oself> <ovar> <primitiveImplementation> ||
'[' <symbolReferenceSopt> ']' '<-' ||
'[' <symbolRefOrLitSopt> ']'
;
<symbolReferenceSopt> ::=
<empty>
| <symbolReferenceS>
;
<symbolRefOrLitSopt> ::=
<empty>
| <symbolRefOrLitS>
;
<waitStatement> ::=
'wait' <expression>
;
<signalStatement> ::=
'signal' <expression>
;
<expressionS> ::=
<expression>
| <expressionS> ',' <expression>
;
<negate> ::=
'~'
| '-'
;
<expression> ::=
<expressionZero>
| <expression> '|' <expression>
| <expression> 'KOR' <expression>
| <expression> '&' <expression>
| <expression> 'KAND' <expression>
| '!' <expression>
| <expression> '==' <expression>
| <expression> '!==' <expression>
| <expression> '=' <expression>
| <expression> '!=' <expression>
| <expression> '>' <expression>
| <expression> '<' <expression>
| <expression> '>=' <expression>
| <expression> '<=' <expression>
| <expression> '*>' <expression>
| 'view' <expression> 'as' <expression>
| 'restrict' <expression> 'to' <expression>
| <expression> '+' <expression>
| <expression> '-' <expression>
| <expression> '*' <expression>
| <expression> '/' <expression>
| <expression> '#' <expression>
| <expression> 'OPERATOR' <expression>
| <negate> <expression>
| 'locate' <expression>
| 'awaiting' <expression>
| 'codeof' <expression>
| 'nameof' <expression>
| 'typeof' <expression>
| 'syntactictypeof' <expression>
| 'islocal' <expression>
| 'isfixed' <expression>
;
<expressionZero> ::=
<alpha>
;
<alpha> ::=
<beta>
| 'new' <primary>
| <alpha> '.' <operationNameRef>
| <alpha> '.*' <primary>
| <alpha> '.?' <operationNameRef>
;
<beta> ::=
<primary>
| 'new' <primary> <neArgumentClause>
| <beta> '[' <argumentS> ']'
| <alpha> '$' 'IDENTIFIER'
| <alpha> '.' <operationNameRef> <neArgumentClause>
| <alpha> '.*' <primary> <neArgumentClause>
| <alpha> '.?' <operationNameRef> <neArgumentClause>
;
<primary> ::=
<literal>
| <symbolReference>
| '(' <expression> ')'
;
<opNameDefinition> ::=
<operationName>
| <operatorName>
| <definableOperatorName>
;
<operatorName> ::=
'OPERATOR'
;
<operationName> ::=
'IDENTIFIER'
;
<definableOperatorName> ::=
'|'
| '&'
| '='
| '!='
| '>'
| '<'
| '>='
| '<='
| '~'
| '!'
| '+'
| '-'
| '*'
| '/'
| '#'
;
<nondefinableOpName> ::=
'=='
| '!=='
| '*>'
;
<operationNameRef> ::=
<operatorName>
| <definableOperatorName>
| <nondefinableOpName>
| <operationName>
;
<neArgumentClause> ::=
'[' ']'
| '[' <argumentS> ']'
;
<argumentS> ::=
<argument>
| <argumentS> ',' <argument>
;
<argument> ::=
<expression>
| 'move' <expression>
| 'visit' <expression>
;
<literal> ::=
'STR LIT'
| 'CHAR LIT'
| 'INT LIT'
| 'REAL LIT'
| 'true'
| 'false'
| 'self'
| 'nil'
| <typeLiteral>
| <vectorLiteral>
;
<vectorLiteral> ::=
'{' <expressionSOpt> <typeClauseOpt> '}'
;
<expressionSOpt> ::=
<empty>
| <expressionS>
| <expressionS> ','
;
<typeObject> ::=
<abstractType>
| 'immutable' <abstractType>
;
<typeLiteral> ::=
<typeRest>
| 'immutable' <typeRest>
| 'monitor' <typeRest>
;
<typeRest> ::=
<abstractType>
| <object>
| <closure>
| <record>
| <enumeration>
| <class>
;
<symbolReference> ::=
'IDENTIFIER'
;
<symbolDefinition> ::=
'IDENTIFIER'
;
