#
# definitions of Emerald
# global macros
#

# global definitions

# instead of $(MAKE), use $(EMMAKE) within Makefiles

# some versions of make (notably sgi's and m88k's) use the user's
# current shell rather than sh to execute commands by default.
# Twits.

# source for the ccalls lives here
CCALLSDIR = /emerald/ccalls

# lib material; includes live here, and libraries live in architecture
# specific subdirectories of here
EMLIBDIR = /emerald/lib
EMBINDIR = /emerald/bin

# Installation paths for DOS
EMLIBXDIR = \emerald\lib
EMBINXDIR = \emerald\bin

# defaults.  May be overridden in architecture specific macroMakefiles

# ranlib
RANLIB = ranlib

# awk
AWK = awk

# sed
SED = sed

CP = copy
CHMOD = rem
#
# i386mach specific definitions
# of commonly-used macros
#

# architecture definition

# (ANSI) C compiler
CC = gcc

# definitions to enable common extensions in headers and libraries
XGCCPFLAGS =

XCPFLAGS = -DDOS -DEMERALDROOT=\"/emerald\"

XLIB =

# C preprocessor
CPP = gcc -E

# dependency generator
DEPEND = gcc -MM

# debugging information, no warnings
CFLAGSDBG = -g -O2
DBGCOPT   = $(CFLAGSDBG)
DBGCPROPT = $(CFLAGSDBG)
DBGVMOPT  = $(CFLAGSDBG)

# maximum optimization, no warnings
CFLAGSOPT = -O2
OPTCOPT   = $(CFLAGSOPT)
OPTCPROPT = $(CFLAGSOPT) -fno-force-mem
OPTVMOPT  = $(CFLAGSOPT)

#
# emx Makefile
#

#
# For debugging
#
# COPT   = $(DBGCOPT)
# CPROPT = $(DBGCPROPT)
# VMOPT  = $(DBGVMOPT)

#
# For optimizing
#
COPT   = $(OPTCOPT)
CPROPT = $(OPTCPROPT)
VMOPT  = $(OPTVMOPT)

#
# For xkernel
#
# LWPFLA = -DCONCURRENT -DXKERNEL -Ishare -Iprotocols -Isimul -DUNIX
# LWPLIB =

#
# For suns sunlwp
#
# LWPFLA = -DCONCURRENT -DSUNLWP '-DLWPINDIR='
# LWPLIB = -lnbio -llwp


CCALLSCPFLAGS = -I$(EMLIBDIR) -I$(CCALLSDIR)/misc \
        -I$(CCALLSDIR)/regexp -I$(CCALLSDIR)/streams

CPFLAGS = $(XCPFLAGS) \
	-I. -I$(EMLIBDIR) \
	-DIMPLEMENTCONCURRENCY -UTIMESLICE \
	-DSINGLESTEP -DCOUNTBYTECODES \
	$(X11FLA) $(LWPFLA)

# no dependencies, these must be kept up to date manually
LIB = -L$(EMLIBDIR) $(XLIB) $(X11LIB) $(LWPLIB)

.c.o:
	$(CC) -c $(CFLAGS) $*.c

CFLAGS   = $(COPT)   $(CPFLAGS)
CPRFLAGS = $(CPROPT) $(CPFLAGS)
VMFLAGS  = $(VMOPT)  $(CPFLAGS)

INC = \
	array.h \
	assert.h \
	builtins.h \
	codemsg.h \
	concurr.h \
	creation.h \
	decmsg.h \
	encmsg.h \
	error.h \
	filestr.h \
	gc.h \
	globals.h \
	hash.h \
	iisc.h \
	iixsc.h \
	ilist.h \
	init.h \
	iosc.h \
	iset.h \
	joveisc.h \
	jsys.h \
	jvisc.h \
	memory.h \
	message.h \
	misc.h \
	oidtoobj.h \
	oisc.h \
	ooisc.h \
	read.h \
	sisc.h \
	sockstr.h \
	squeue.h \
	streams.h \
	trace.h \
	types.h \
	unalign.h \
	vm.h \
	vm_i.h \
	vm_exp.h \
	write.h \
	$(X11INC)

REALSRC = \
	array.c \
	codemsg.c \
	conform.c \
	creation.c \
	debug.c \
	decmsg.c \
	encmsg.c \
	error.c \
	filestr.c \
	gc.c \
	globals.c \
	hash.c \
	iisc.c \
	iixsc.c \
	ilist.c \
	iosc.c \
	iset.c \
	joveisc.c \
	jsys.c \
	jvisc.c \
	main.c \
	message.c \
	misc.c \
	oidtoobj.c \
	oisc.c \
	ooisc.c \
	read.c \
	sisc.c \
	sockstr.c \
	squeue.c \
	streams.c \
	trace.c \
	vm.c \
	write.c \
	$(X11SRC)

CCALLSOBJ = cctab.o emstream.o hello.o regexp.o regsub.o regerror.o string.o

CCALLSSRC = $(EMLIBDIR)/cctab.c $(CCALLSDIR)/streams/emstream.c \
        $(EMLIBDIR)/misc/hello.c $(EMLIBDIR)/regexp/regexp.c \
        $(EMLIBDIR)/regexp/regsub.c $(EMLIBDIR)/regexp/regerror.c \
	$(EMLIBDIR)/string/string.c

SRC =   $(REALSRC) $(CCALLSSRC) vm.d

OBJ = \
	array.o \
	codemsg.o \
	conform.o \
	creation.o \
	debug.o \
	decmsg.o \
	encmsg.o \
	error.o \
	filestr.o \
	gc.o \
	globals.o \
	hash.o \
	iisc.o \
	iixsc.o \
	ilist.o \
	iosc.o \
	iset.o \
	joveisc.o \
	jsys.o \
	jvisc.o \
	main.o \
	message.o \
	misc.o \
	oidtoobj.o \
	oisc.o \
	ooisc.o \
	read.o \
	sisc.o \
	sockstr.o \
	squeue.o \
	streams.o \
	trace.o \
	vm.o \
	write.o \
	$(GCOBJ) \
	$(CCALLSOBJ) \
	$(X11OBJ)

LIBDIR = lib/$(ARCH)

LOAD = $(LIBDIR)/userrt0.o $(OBJ) $(LIBDIR)/libxsim.a

all:    emx.exe

install: $(EMBINDIR)/emx.exe $(EMLIBDIR)/bcdefs

$(EMLIBDIR)/bcdefs : vm.h
	$(CP) vm.h $(EMLIBXDIR)\bcdefs
	$(CHMOD) 664 $(EMLIBXDIR)\bcdefs

$(EMBINDIR)/emx.exe : emx.exe
	$(CP) emx.exe $(EMBINXDIR)\emx.exe

cctab.o:
	$(CC) -c $(CCALLSCPFLAGS) $(CFLAGS) $(EMLIBDIR)/cctab.c

emstream.o:
	$(CC) -c $(CCALLSCPFLAGS) $(CFLAGS) $(CCALLSDIR)/streams/emstream.c

hello.o:
	$(CC) -c $(CCALLSCPFLAGS) $(CFLAGS) $(CCALLSDIR)/misc/hello.c

regexp.o:
	$(CC) -c $(CCALLSCPFLAGS) $(CFLAGS) $(CCALLSDIR)/regexp/regexp.c

regsub.o:
	$(CC) -c $(CCALLSCPFLAGS) $(CFLAGS) $(CCALLSDIR)/regexp/regsub.c

regerror.o:
	$(CC) -c $(CCALLSCPFLAGS) $(CFLAGS) $(CCALLSDIR)/regexp/regerror.c

string.o:
	$(CC) -c $(CCALLSCPFLAGS) $(CFLAGS) $(CCALLSDIR)/string/string.c

tags:   $(SRC) $(INC)
	ctags -tw $(SRC) $(INC)

unalign.h:
	sed -n -e '1,/define IFETCH1/p' < vm.c > unalign.h

vm.h vm_i.h vm.c:       vm.d
	if issymlink vm.c ; then \
	  rm -f ../src/vm.c ../src/vm.h ../src/vm_i.h ; \
	else \
	  rm -f vm.c vm.h vm_i.h ; \
	fi
	vmc vm.d
	chmod -w vm.c vm.h vm_i.h

vm.o: vm.c types.h
	$(CC) $(VMFLAGS) -c vm.c

vm.s: vm.c types.h
	$(CC) -S $(VMFLAGS) vm.c

vm.x: vm.c types.h
	$(CPP) $(VMFLAGS) vm.c > vm.x

#ncpr.o: ncpr.c types.h
#       $(CC) $(CPRFLAGS) -c ncpr.c

xvm.o: vm.c types.h
	$(CC) $(VMFLAGS) -o xvm.o -c vm.c

xcreation.o: creation.c types.h
	$(CC) $(CFLAGS) -o xcreation.o -c creation.c

user:   $(LOAD)
	ld -r -o user $(LOAD)

emx.exe: emx
	coff2exe emx

emx:    $(OBJ)
	@echo linking ...
	$(CC) $(CFLAGS) $(OBJ) -o emx $(LIB)

#
# Because test -h doesn't work on all machines, we use a
# machine dependent issymlink script
#
links:
	for x in $(REALSRC) vm.d $(INC) ; do \
	  if issymlink $$x ; then rm $$x ; fi ; \
	  ln -s ../src/$$x . ; \
	done

checkout:
	for x in $(REALSRC) vm.d $(INC) ; do \
	  if issymlink $$x ; then \
	    true; \
	  else if cmp -s ../src/$$x $$x ; then \
	    echo "$$x is a copy of the real thing." ; \
	  else \
	    echo "Something funny with $$x" ; \
	    ls -l $$x ; \
	  fi ; fi ; \
	done

mothball:       clean
	for x in $(REALSRC) vm.d $(INC) ; do \
	  if issymlink $$x ; then \
	    rm -f $$x ; \
	  else \
	    echo "Something funny with $$x" ; \
	    ls -l $$x ; \
	  fi ; \
	done
	rm Makefile

clean:
	rm -f xvm emx user $(OBJ)

sources src:
	@echo $(SRC)

objects obj:
	@echo $(OBJ)

includes inc:
	@echo $(INC)

# WARNING!  Hackish behaviour below.
# We require $SRC == $(REALSRC) $(CCALLSSRC) vm.d
# There appear to be dragons ^H^H^H line length limits on a Unix
# command, so we have to build dependencies with more than one
# command line.  Also, we can't do a make depend on vm.d,
# as it's not legal C, so need to exclude it specifically.
depend: $(SRC)
	$(DEPEND) $(CFLAGS) $(REALSRC)    >  makedep
	$(DEPEND) $(CFLAGS) $(CCALLSSRC)  >> makedep
	@echo '$$r makedep' > eddep
	@echo '/^# DO NOT DELETE THIS LINE/+1,$$d' >>eddep
	@echo '$$r makedep' >>eddep
	@echo 'w' >>eddep
	@cp Makefile Makefile.bak
	@ex - Makefile < eddep
	@rm eddep makedep

# DO NOT DELETE THIS LINE -- make depend uses it
array.o : array.c misc.h types.h streams.h memory.h array.h 
codemsg.o : codemsg.c codemsg.h types.h streams.h vm_exp.h vm_i.h \
  vm.h assert.h globals.h builtins.h iisc.h memory.h misc.h jsys.h creation.h \
  oidtoobj.h oisc.h iosc.h squeue.h concurr.h iset.h trace.h hash.h 
conform.o : conform.c types.h streams.h assert.h ooisc.h memory.h trace.h globals.h \
  builtins.h iisc.h oidtoobj.h oisc.h iosc.h 
creation.o : creation.c memory.h types.h streams.h vm_exp.h vm_i.h vm.h assert.h \
  globals.h builtins.h iisc.h misc.h jsys.h creation.h oidtoobj.h oisc.h \
  iosc.h squeue.h concurr.h iset.h trace.h 
debug.o : debug.c assert.h vm_exp.h vm_i.h vm.h types.h globals.h builtins.h \
  iisc.h memory.h misc.h jsys.h creation.h oidtoobj.h oisc.h iosc.h squeue.h \
  concurr.h iset.h trace.h read.h array.h streams.h 
decmsg.o : decmsg.c assert.h builtins.h globals.h iisc.h memory.h \
  types.h streams.h decmsg.h codemsg.h vm_exp.h vm_i.h vm.h misc.h \
  jsys.h creation.h oidtoobj.h oisc.h iosc.h squeue.h concurr.h iset.h trace.h \
  hash.h message.h sockstr.h 
encmsg.o : encmsg.c encmsg.h codemsg.h types.h streams.h \
  vm_exp.h vm_i.h vm.h assert.h globals.h builtins.h iisc.h memory.h misc.h \
  jsys.h creation.h oidtoobj.h oisc.h iosc.h squeue.h concurr.h iset.h trace.h \
  hash.h 
error.o : error.c error.h 
filestr.o : filestr.c filestr.h streams.h assert.h error.h memory.h 
gc.o : gc.c gc.h types.h streams.h assert.h 
globals.o : globals.c types.h streams.h globals.h builtins.h iisc.h memory.h \
  jsys.h 
hash.o : hash.c assert.h hash.h memory.h 
iisc.o : iisc.c iisc.h memory.h assert.h 
ilist.o : ilist.c assert.h ilist.h memory.h 
iosc.o : iosc.c iosc.h memory.h types.h streams.h assert.h 
iset.o : iset.c assert.h iset.h memory.h 
joveisc.o : joveisc.c assert.h joveisc.h types.h streams.h array.h memory.h \
  iisc.h 
jsys.o : jsys.c init.h trace.h types.h streams.h globals.h builtins.h iisc.h \
  memory.h oidtoobj.h oisc.h iosc.h assert.h 
jvisc.o : jvisc.c jvisc.h memory.h types.h streams.h assert.h 
main.o : main.c types.h streams.h iisc.h memory.h trace.h assert.h vm_exp.h \
  vm_i.h vm.h globals.h builtins.h misc.h jsys.h creation.h oidtoobj.h oisc.h \
  iosc.h squeue.h concurr.h iset.h 
message.o : message.c error.h message.h types.h streams.h vm_exp.h vm_i.h vm.h \
  assert.h globals.h builtins.h iisc.h memory.h misc.h jsys.h creation.h oidtoobj.h \
  oisc.h iosc.h squeue.h concurr.h iset.h trace.h \
  decmsg.h codemsg.h hash.h encmsg.h sockstr.h 
misc.o : misc.c iset.h memory.h iisc.h hash.h trace.h types.h streams.h misc.h \
  error.h assert.h vm_exp.h vm_i.h vm.h globals.h builtins.h jsys.h creation.h \
  oidtoobj.h oisc.h iosc.h squeue.h concurr.h \emerald\lib\cctab.h 
oidtoobj.o : oidtoobj.c iset.h memory.h oidtoobj.h types.h streams.h \
  oisc.h iosc.h ooisc.h globals.h builtins.h iisc.h trace.h read.h array.h 
oisc.o : oisc.c oisc.h memory.h types.h streams.h assert.h 
ooisc.o : ooisc.c ooisc.h memory.h types.h streams.h assert.h 
read.o : read.c memory.h array.h assert.h write.h types.h streams.h read.h iisc.h \
  oisc.h codemsg.h vm_exp.h vm_i.h vm.h globals.h builtins.h misc.h jsys.h \
  creation.h oidtoobj.h iosc.h squeue.h concurr.h iset.h trace.h hash.h \
  joveisc.h jvisc.h message.h filestr.h 
sisc.o : sisc.c assert.h sisc.h memory.h 
sockstr.o : sockstr.c sockstr.h streams.h types.h error.h \
  memory.h misc.h assert.h 
squeue.o : squeue.c squeue.h memory.h assert.h 
streams.o : streams.c error.h streams.h memory.h assert.h 
trace.o : trace.c assert.h trace.h 
vm.o : vm.c vm_i.h vm.h assert.h types.h streams.h globals.h builtins.h iisc.h \
  memory.h misc.h jsys.h creation.h oidtoobj.h oisc.h iosc.h squeue.h concurr.h \
  iset.h trace.h sisc.h ilist.h 
write.o : write.c array.h builtins.h codemsg.h types.h streams.h vm_exp.h \
  vm_i.h vm.h assert.h globals.h iisc.h memory.h misc.h jsys.h creation.h oidtoobj.h \
  oisc.h iosc.h squeue.h concurr.h iset.h trace.h hash.h error.h filestr.h \
  read.h write.h 
cctab.o : ..\..\lib\cctab.c ..\..\lib\cctab.h 
